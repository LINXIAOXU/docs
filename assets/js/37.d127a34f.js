(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{260:function(e,t,a){"use strict";a.r(t);var s=a(6),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"redis入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis入门"}},[e._v("#")]),e._v(" Redis入门")]),e._v(" "),a("h2",{attrs:{id:"一-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-基础"}},[e._v("#")]),e._v(" 一. 基础")]),e._v(" "),a("p",[e._v("Redis是一个开源的高性能键值对数据库")]),e._v(" "),a("p",[e._v("作为缓存系统，Redis还可以限定数据占用的最大内存空间，在数据达到空间限制后可以按照一定的规则自动淘汰不需要的键")]),e._v(" "),a("p",[e._v("redis-cli是Redis自带的命令行客户端")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("keys pattern\n查找符合给定的模式（pattern，非正则）的key，如：keys * 显示所有key,key ? 显示任意一个字符的key\n\nexists key [key…]\nkey是否存在，返回integer，即返回存在的数量\n\ndel key [key…]\n删除key，返回integer，即返回删除成功的数量\n\ndump key\nkey进行序列化，返回序列化后的值\n\ntype key\n返回key所存储值的类型\n")])])]),a("h2",{attrs:{id:"二-string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-string类型"}},[e._v("#")]),e._v(" 二. string类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("set key value\nkey赋值为value，key不存在则生成，存在则覆盖（相当于更新）\n\nget key\n返回key值\n\nstrlen key\nkey的value长度，从1开始\n")])])]),a("h2",{attrs:{id:"三-hash类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-hash类型"}},[e._v("#")]),e._v(" 三. hash类型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("hset key field value\n将key的hash表中的字段field设值为\nvalue（由field和关联的value组成的map），字段不存在则生成，存在则覆盖（相当于更新）\n\nhgetall key\n获取key中所有的字段和值\n\nhget key field\n获取key中指定字段的值\n\nhlen key\nkey的字段数量,返回integer\n\nhdel key field1 [field2]\n删除一个或多个hash字段\n")])])]),a("h2",{attrs:{id:"四-list列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-list列表"}},[e._v("#")]),e._v(" 四. list列表")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lpush key value1 [value2]\n将一个或多个值插入到列表头部，返回插入数量，从1开始\n\nllen key\n获取列表长度\n\nlrange key start stop\n获取列表指定范围内的元素，start、stop超出范围，只返回范围内存在的元素\n\nblpop key1 [key2 ] timeout\n移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n\nbrpop key1 [key2 ] timeout\n移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\n\nlrem key count value\n移除列表中count个value元素，返回移除成功的数量\n\nrpop key\n移除并获取列表最后一个元素\n")])])]),a("h2",{attrs:{id:"五-set集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-set集合"}},[e._v("#")]),e._v(" 五. set集合")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sadd key member1 [member2…]\n向集合添加一个或多个元素，返回成功添加个数\n\nscard key\n获取集合的元素个数\n\nsmembers key\n返回集合所有元素\n\nsrem key member1 [member2…]\n移除集合中一个或多个元素，返回移除成功个数\n")])])]),a("h2",{attrs:{id:"六-zset有序集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-zset有序集合"}},[e._v("#")]),e._v(" 六. zset有序集合")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("zadd key score1 member1 [score2 member2…]\n添加一个或多个元素，并给每个元素设置分数,返回成功插入个数\n\nzcard key\n获取集合元素个数\n\nzcount key min max\n统计score在[min,max]区间的元素数量\n\nzrem key member[member…]\n移除有序集合中的一个或多个元素\n")])])]),a("p",[e._v("参考：\nhttps://blog.csdn.net/IT_faquir/article/details/79774821")])])}),[],!1,null,null,null);t.default=n.exports}}]);