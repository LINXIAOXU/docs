(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{352:function(t,a,r){"use strict";r.r(a);var e=r(6),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"持续集成工具jenkins"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#持续集成工具jenkins"}},[t._v("#")]),t._v(" 持续集成工具Jenkins")]),t._v(" "),r("h2",{attrs:{id:"什么是持续集成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是持续集成"}},[t._v("#")]),t._v(" 什么是持续集成")]),t._v(" "),r("p",[t._v("持续集成顾名思义就是保持不间断地将软件开发中的事情集中到一个地方进行管理和处理，包括代码库的维护、测试环境的搭建、测试脚本的运行、测试结果的报告发送等。通过持续集成的工具把这些事情集中到一起按照一定步骤进行自动化处理，和自动化测试框架非常类似，只是前者的框架不局限于测试，而是贯穿了整个项目的各个环节。")]),t._v(" "),r("p",[t._v("如果通过持续集成将每个人需要做的事情放在持续集成工具上，按照相关顺序配置进行自动执行，不需要人工介入即可以完成以上的流程，就可以大大地提高工作效率，而且这是一个可持续循环执行的过程，可谓一劳永逸。")]),t._v(" "),r("h2",{attrs:{id:"构建触发器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建触发器"}},[t._v("#")]),t._v(" 构建触发器")]),t._v(" "),r("p",[t._v("配置完成代码管理之后就是最关键的构建触发器，一切的构建脚本都要满足触发器设置的条件才能执行，也就是说不设置触发器是不会执行后续的构建的，触发器有4种类型。")]),t._v(" "),r("h3",{attrs:{id:"_1-触发远程构建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-触发远程构建"}},[t._v("#")]),t._v(" 1. 触发远程构建")]),t._v(" "),r("p",[t._v("这个触发器需要远程脚本或者命令触发，和手动执行是一样的，所以除非特殊情况一般不会使用。")]),t._v(" "),r("h3",{attrs:{id:"_2-build-after-other-projects-are-built"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-build-after-other-projects-are-built"}},[t._v("#")]),t._v(" 2.Build after other projects are built")]),t._v(" "),r("p",[t._v("完成某个构建任务之后执行这个构建任务，如同流水线中的先后顺序，只有完成了上一步的工作，才会触发这个任务执行，适用于多个关联构建任务。")]),t._v(" "),r("h3",{attrs:{id:"_3-build-periodically"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-build-periodically"}},[t._v("#")]),t._v(" 3.Build periodically")]),t._v(" "),r("p",[t._v("定时触发构建，类似于crontab脚本的配置，可以指定构建的时间，比如每天的9点执行或者每周一9点执行。")]),t._v(" "),r("h3",{attrs:{id:"_4-poll-scm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-poll-scm"}},[t._v("#")]),t._v(" 4.Poll SCM")]),t._v(" "),r("p",[t._v("这也是一个定时触发构建，与Build periodically的区别在于定时检查源代码是否更新，只有更新了代码才会触发，而Build periodically只是定时执行，不用判断是否更新代码。")])])}),[],!1,null,null,null);a.default=s.exports}}]);